{"ast":null,"code":"var _jsxFileName = \"/Users/coder/Documents/The Odin Project/repos/memory-card/react-memory-card/src/components/Body.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Card from \"./Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Body = _ref => {\n  _s();\n  let {\n    currentCards,\n    incrementCurrentScore,\n    incrementLevel,\n    madeAMistake\n  } = _ref;\n  const [cardsDisplay, setCardsDisplay] = useState(currentCards);\n  const shuffle = () => {\n    //shuffle currentCards;\n    let newOrder = [],\n      shuffledCards = []; //contains the order in which currentCards will be shuffled\n\n    //this will run until newOrder has a position for each element of currentCards that will later be stored in cardsDisplay\n    while (newOrder.length !== currentCards.length) {\n      let tempPosition = Math.floor(Math.random() * cardsDisplay.length); //Generate a temp number between 0 and length of cards - 1\n\n      if (!newOrder.includes(tempPosition)) newOrder.push(tempPosition);\n    }\n\n    //setCardsDisplay(shuffledCards);\n    for (let i = 0; i < currentCards.length; i++) {\n      //shuffledCards[newOrder[i]].push(currentCards[i]);\n      console.log(shuffledCards[i]);\n    }\n\n    //console.log(shuffledCards);\n    //setCardsDisplay(shuffledCards);\n  };\n\n  shuffle();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: incrementCurrentScore,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: madeAMistake,\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      picture: \"picture\",\n      name: \"name\",\n      hasBeenSelected: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Body, \"gj7NAWl33VKYTA0PluBfNrE35bg=\");\n_c = Body;\nexport default Body;\nvar _c;\n$RefreshReg$(_c, \"Body\");","map":{"version":3,"names":["React","useState","Card","jsxDEV","_jsxDEV","Fragment","_Fragment","Body","_ref","_s","currentCards","incrementCurrentScore","incrementLevel","madeAMistake","cardsDisplay","setCardsDisplay","shuffle","newOrder","shuffledCards","length","tempPosition","Math","floor","random","includes","push","i","console","log","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","picture","name","hasBeenSelected","_c","$RefreshReg$"],"sources":["/Users/coder/Documents/The Odin Project/repos/memory-card/react-memory-card/src/components/Body.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport Card from \"./Card\";\n\nconst Body = ({\n  currentCards,\n  incrementCurrentScore,\n  incrementLevel,\n  madeAMistake,\n}) => {\n  const [cardsDisplay, setCardsDisplay] = useState(currentCards);\n\n  const shuffle = () => {\n    //shuffle currentCards;\n    let newOrder = [], shuffledCards = []; //contains the order in which currentCards will be shuffled\n\n    //this will run until newOrder has a position for each element of currentCards that will later be stored in cardsDisplay\n    while (newOrder.length !== currentCards.length) {\n      let tempPosition = Math.floor(Math.random() * cardsDisplay.length); //Generate a temp number between 0 and length of cards - 1\n\n      if (!newOrder.includes(tempPosition)) newOrder.push(tempPosition);\n    }\n\n    //setCardsDisplay(shuffledCards);\n    for (let i = 0; i < currentCards.length; i++) {\n        //shuffledCards[newOrder[i]].push(currentCards[i]);\n        console.log(shuffledCards[i])\n    }\n\n    //console.log(shuffledCards);\n    //setCardsDisplay(shuffledCards);\n  };\n\n  shuffle();\n\n  return (\n    <>\n      <button onClick={incrementCurrentScore}>+</button>\n      <button onClick={madeAMistake}>-</button>\n      <Card picture={\"picture\"} name={\"name\"} hasBeenSelected={false}/>\n    </>\n  );\n};\n\nexport default Body;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,MAAMC,IAAI,GAAGC,IAAA,IAKP;EAAAC,EAAA;EAAA,IALQ;IACZC,YAAY;IACZC,qBAAqB;IACrBC,cAAc;IACdC;EACF,CAAC,GAAAL,IAAA;EACC,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAACS,YAAY,CAAC;EAE9D,MAAMM,OAAO,GAAGA,CAAA,KAAM;IACpB;IACA,IAAIC,QAAQ,GAAG,EAAE;MAAEC,aAAa,GAAG,EAAE,CAAC,CAAC;;IAEvC;IACA,OAAOD,QAAQ,CAACE,MAAM,KAAKT,YAAY,CAACS,MAAM,EAAE;MAC9C,IAAIC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGT,YAAY,CAACK,MAAM,CAAC,CAAC,CAAC;;MAEpE,IAAI,CAACF,QAAQ,CAACO,QAAQ,CAACJ,YAAY,CAAC,EAAEH,QAAQ,CAACQ,IAAI,CAACL,YAAY,CAAC;IACnE;;IAEA;IACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhB,YAAY,CAACS,MAAM,EAAEO,CAAC,EAAE,EAAE;MAC1C;MACAC,OAAO,CAACC,GAAG,CAACV,aAAa,CAACQ,CAAC,CAAC,CAAC;IACjC;;IAEA;IACA;EACF,CAAC;;EAEDV,OAAO,CAAC,CAAC;EAET,oBACEZ,OAAA,CAAAE,SAAA;IAAAuB,QAAA,gBACEzB,OAAA;MAAQ0B,OAAO,EAAEnB,qBAAsB;MAAAkB,QAAA,EAAC;IAAC;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAClD9B,OAAA;MAAQ0B,OAAO,EAAEjB,YAAa;MAAAgB,QAAA,EAAC;IAAC;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACzC9B,OAAA,CAACF,IAAI;MAACiC,OAAO,EAAE,SAAU;MAACC,IAAI,EAAE,MAAO;MAACC,eAAe,EAAE;IAAM;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA,eACjE,CAAC;AAEP,CAAC;AAACzB,EAAA,CAtCIF,IAAI;AAAA+B,EAAA,GAAJ/B,IAAI;AAwCV,eAAeA,IAAI;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}