{"ast":null,"code":"import CardGroup from\"react-bootstrap/CardGroup\";import Alert from\"react-bootstrap/Alert\";import Cards from\"./Cards\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Body=function Body(_ref){var currentCards=_ref.currentCards,setCurrentCards=_ref.setCurrentCards,incrementCurrentScore=_ref.incrementCurrentScore,incrementLevel=_ref.incrementLevel,madeAMistake=_ref.madeAMistake,showAlert=_ref.showAlert,setShowAlert=_ref.setShowAlert,codeIsActivated=_ref.codeIsActivated;var shuffle=function shuffle(cards){//shuffle currentCards\nvar newOrder=[],shuffledCards=[];//contains the order in which currentCards will be shuffled\n//this will run until newOrder has a position for each element of currentCards that will later be stored in currentCards\nwhile(newOrder.length!==cards.length){var tempPosition=Math.floor(Math.random()*cards.length);//Generate a temp number between 0 and length of cards - 1\nif(!newOrder.includes(tempPosition))newOrder.push(tempPosition);}//arrange shuffledCards according to newOrder\nfor(var i=0;i<cards.length;i++){shuffledCards.push(cards[newOrder[i]]);}return shuffledCards;};var updateHasBeenClicked=function updateHasBeenClicked(cardId){var tempCurrentCards=[];var hasMadeAMistake=false;currentCards.forEach(function(card){if(card.name===cardId){if(card.hasBeenSelected===false){//cards hasn't been clicked before\nincrementCurrentScore();tempCurrentCards.push({picture:card.picture,name:card.name,hasBeenSelected:true});}else{//cards has been clicked before\nhasMadeAMistake=true;tempCurrentCards.push(card);}}else tempCurrentCards.push(card);//untouched card\n});if(!hasMadeAMistake){var selectedCardsCount=0;tempCurrentCards.forEach(function(card){if(card.hasBeenSelected)selectedCardsCount++;});if(selectedCardsCount===currentCards.length){//every cards has been selected\nincrementLevel();}else{//not all cards have been selected\nsetCurrentCards(shuffle(tempCurrentCards));}}else{setCurrentCards(shuffle(tempCurrentCards));madeAMistake();}};return/*#__PURE__*/_jsxs(\"div\",{className:\"body\",children:[showAlert&&/*#__PURE__*/_jsxs(Alert,{variant:\"danger\",onClose:function onClose(){return setShowAlert(false);},dismissible:true,children:[/*#__PURE__*/_jsx(Alert.Heading,{children:\"Oh snap, You lost!\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Try again...\"})]}),/*#__PURE__*/_jsx(CardGroup,{children:currentCards.map(function(card){return/*#__PURE__*/_jsx(\"div\",{class:\"cards-case\",children:/*#__PURE__*/_jsx(Cards,{picture:card.picture,name:card.name,hasBeenSelected:card.hasBeenSelected,updateHasBeenClicked:updateHasBeenClicked,codeIsActivated:codeIsActivated})},card.name);})}),currentCards.length===0&&/*#__PURE__*/_jsx(\"div\",{className:\"loading\",children:/*#__PURE__*/_jsx(\"div\",{class:\"spinner-border m-5\",style:{width:\"8rem\",height:\"8rem\"},role:\"status\"})})]});};export default Body;","map":{"version":3,"names":["CardGroup","Alert","Cards","jsx","_jsx","jsxs","_jsxs","Body","_ref","currentCards","setCurrentCards","incrementCurrentScore","incrementLevel","madeAMistake","showAlert","setShowAlert","codeIsActivated","shuffle","cards","newOrder","shuffledCards","length","tempPosition","Math","floor","random","includes","push","i","updateHasBeenClicked","cardId","tempCurrentCards","hasMadeAMistake","forEach","card","name","hasBeenSelected","picture","selectedCardsCount","className","children","variant","onClose","dismissible","Heading","map","class","style","width","height","role"],"sources":["/Users/coder/Documents/The Odin Project/repos/react-memory-card/react-memory-card/src/components/Body.js"],"sourcesContent":["import CardGroup from \"react-bootstrap/CardGroup\";\nimport Alert from \"react-bootstrap/Alert\";\n\nimport Cards from \"./Cards\";\n\nconst Body = ({\n  currentCards,\n  setCurrentCards,\n  incrementCurrentScore,\n  incrementLevel,\n  madeAMistake,\n  showAlert,\n  setShowAlert,\n  codeIsActivated,\n}) => {\n  const shuffle = (cards) => {\n    //shuffle currentCards\n    let newOrder = [],\n      shuffledCards = []; //contains the order in which currentCards will be shuffled\n\n    //this will run until newOrder has a position for each element of currentCards that will later be stored in currentCards\n    while (newOrder.length !== cards.length) {\n      let tempPosition = Math.floor(Math.random() * cards.length); //Generate a temp number between 0 and length of cards - 1\n\n      if (!newOrder.includes(tempPosition)) newOrder.push(tempPosition);\n    }\n\n    //arrange shuffledCards according to newOrder\n    for (let i = 0; i < cards.length; i++) {\n      shuffledCards.push(cards[newOrder[i]]);\n    }\n\n    return shuffledCards;\n  };\n\n  const updateHasBeenClicked = (cardId) => {\n    let tempCurrentCards = [];\n    let hasMadeAMistake = false;\n\n    currentCards.forEach((card) => {\n      if (card.name === cardId) {\n        if (card.hasBeenSelected === false) {\n          //cards hasn't been clicked before\n          incrementCurrentScore();\n          tempCurrentCards.push({\n            picture: card.picture,\n            name: card.name,\n            hasBeenSelected: true,\n          });\n        } else {\n          //cards has been clicked before\n          hasMadeAMistake = true;\n          tempCurrentCards.push(card);\n        }\n      } else tempCurrentCards.push(card); //untouched card\n    });\n\n    if (!hasMadeAMistake) {\n      let selectedCardsCount = 0;\n      tempCurrentCards.forEach((card) => {\n        if (card.hasBeenSelected) selectedCardsCount++;\n      });\n\n      if (selectedCardsCount === currentCards.length) {\n        //every cards has been selected\n        incrementLevel();\n      } else {\n        //not all cards have been selected\n        setCurrentCards(shuffle(tempCurrentCards));\n      }\n    } else {\n      setCurrentCards(shuffle(tempCurrentCards));\n      madeAMistake();\n    }\n  };\n\n  return (\n    <div className=\"body\">\n      {showAlert && (\n        <Alert variant=\"danger\" onClose={() => setShowAlert(false)} dismissible>\n          <Alert.Heading>Oh snap, You lost!</Alert.Heading>\n          <p>Try again...</p>\n        </Alert>\n      )}\n      <CardGroup>\n        {currentCards.map((card) => {\n          return (\n            <div class=\"cards-case\" key={card.name}>\n              <Cards\n                picture={card.picture}\n                name={card.name}\n                hasBeenSelected={card.hasBeenSelected}\n                updateHasBeenClicked={updateHasBeenClicked}\n                codeIsActivated={codeIsActivated}\n              />\n            </div>\n          );\n        })}\n      </CardGroup>\n      {currentCards.length === 0 && (\n        <div className=\"loading\">\n          <div\n            class=\"spinner-border m-5\"\n            style={{ width: \"8rem\", height: \"8rem\"}}\n            role=\"status\"\n          >\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Body;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}