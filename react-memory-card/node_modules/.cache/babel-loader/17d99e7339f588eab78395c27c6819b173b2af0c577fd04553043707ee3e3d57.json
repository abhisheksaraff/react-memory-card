{"ast":null,"code":"var _jsxFileName = \"/Users/coder/Documents/The Odin Project/repos/memory-card/react-memory-card/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Header from \"./components/Header\";\nimport Body from \"./components/Body\";\nimport Footer from \"./components/Footer\";\nimport konamiCode from \"./assets/KonamiCode.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [currentScore, setCurrentScore] = useState(0);\n  const [bestScore, setBestScore] = useState(0);\n  const [currentLevel, setLevel] = useState(1);\n  const [currentCards, setCurrentCards] = useState([]);\n  const [totalLives, setTotalLives] = useState(1);\n  const [keyUpCount, setKeyUpCount] = useState(0);\n  const [codeIsActivated, setCodeIsActivated] = useState(false);\n  const incrementCurrentScore = () => {\n    setCurrentScore(currentScore + 1);\n    if (currentScore + 1 > bestScore) updateBestScore();\n  };\n  const incrementLevel = () => {\n    refreshCards(currentLevel + 1);\n    setLevel(currentLevel + 1);\n  };\n  const updateBestScore = () => {\n    setBestScore(currentScore + 1);\n  };\n  const madeAMistake = () => {\n    if (totalLives === 1) {\n      initializeGame();\n    } else {\n      setTotalLives(totalLives - 1);\n    }\n  };\n  const initializeGame = () => {\n    console.log(`You Lost at Score: ${currentScore}`);\n\n    //set current Score to 0, set Level to 1, set current Cards to Level 1, deactivate code, set lives to 1\n    setCurrentScore(0);\n    setLevel(1);\n    refreshCards(1);\n    setCodeIsActivated(false);\n    setTotalLives(1);\n  };\n  const incrementTotalLives = () => {\n    if (!codeIsActivated) {\n      setTotalLives(3);\n      setCodeIsActivated(true);\n    }\n  };\n  const upUpDownDown = event => {\n    if (!codeIsActivated) {\n      let code = event.code;\n\n      //if the current code hasn't completed the konami code but hasn't had a mistake yet either\n      if (keyUpCount < konamiCode.data.length - 1) {\n        //if the next keyup is the right key for konami code, continue waiting for next key\n        if (konamiCode.data[keyUpCount] === code) {\n          setKeyUpCount(keyUpCount + 1);\n        } //if the next keyup is the wrong key for konami code, start over\n        else {\n          setKeyUpCount(0);\n        } //if the current code is equal to the konami code\n      } else {\n        setKeyUpCount(0);\n        incrementTotalLives();\n      }\n    }\n  };\n  const refreshCards = async size => {\n    let tempCards = [];\n    for (let i = 0; i <= size; i++) {\n      try {\n        let response = await fetch(\"https://picsum.photos/100/\");\n        let name = await response.url;\n        tempCards.push({\n          picture: name,\n          name: i + \"\",\n          hasBeenSelected: false\n        });\n      } catch (e) {\n        console.error(e.message);\n      }\n    }\n    setCurrentCards(tempCards);\n  };\n  useEffect(() => {\n    refreshCards(1);\n  }, []);\n  useEffect(() => {\n    window.addEventListener(\"keyup\", upUpDownDown);\n    return () => {\n      window.removeEventListener(\"keyup\", upUpDownDown);\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      currentScore: currentScore,\n      currentLevel: currentLevel,\n      bestScore: bestScore,\n      codeIsActivated: codeIsActivated,\n      totalLives: totalLives\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Body, {\n      currentCards: currentCards,\n      setCurrentCards: setCurrentCards,\n      incrementCurrentScore: incrementCurrentScore,\n      incrementLevel: incrementLevel,\n      madeAMistake: madeAMistake\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"9IM75sW3z4h0EVVew7HhbJFC3Ho=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","Body","Footer","konamiCode","jsxDEV","_jsxDEV","App","_s","currentScore","setCurrentScore","bestScore","setBestScore","currentLevel","setLevel","currentCards","setCurrentCards","totalLives","setTotalLives","keyUpCount","setKeyUpCount","codeIsActivated","setCodeIsActivated","incrementCurrentScore","updateBestScore","incrementLevel","refreshCards","madeAMistake","initializeGame","console","log","incrementTotalLives","upUpDownDown","event","code","data","length","size","tempCards","i","response","fetch","name","url","push","picture","hasBeenSelected","e","error","message","window","addEventListener","removeEventListener","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/coder/Documents/The Odin Project/repos/memory-card/react-memory-card/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport Header from \"./components/Header\";\nimport Body from \"./components/Body\";\nimport Footer from \"./components/Footer\";\nimport konamiCode from \"./assets/KonamiCode.json\";\n\nconst App = () => {\n  const [currentScore, setCurrentScore] = useState(0);\n  const [bestScore, setBestScore] = useState(0);\n  const [currentLevel, setLevel] = useState(1);\n  const [currentCards, setCurrentCards] = useState([]);\n  const [totalLives, setTotalLives] = useState(1);\n\n  const [keyUpCount, setKeyUpCount] = useState(0);\n  const [codeIsActivated, setCodeIsActivated] = useState(false);\n\n  const incrementCurrentScore = () => {\n    setCurrentScore(currentScore + 1);\n    if (currentScore + 1 > bestScore) updateBestScore();\n  };\n\n  const incrementLevel = () => {\n    refreshCards(currentLevel + 1);\n    setLevel(currentLevel + 1);\n  };\n\n  const updateBestScore = () => {\n    setBestScore(currentScore + 1);\n  };\n\n  const madeAMistake = () => {\n    if (totalLives === 1) {\n      initializeGame();\n    } else {\n      setTotalLives(totalLives - 1);\n    }\n  };\n\n  const initializeGame = () => {\n    console.log(`You Lost at Score: ${currentScore}`);\n\n    //set current Score to 0, set Level to 1, set current Cards to Level 1, deactivate code, set lives to 1\n    setCurrentScore(0);\n    setLevel(1);\n    refreshCards(1);\n    setCodeIsActivated(false);\n    setTotalLives(1);\n  };\n\n  const incrementTotalLives = () => {\n    if (!codeIsActivated) {\n      setTotalLives(3);\n      setCodeIsActivated(true);\n    }\n  };\n\n  const upUpDownDown = (event) => {\n    if (!codeIsActivated) {\n      let code = event.code;\n\n      //if the current code hasn't completed the konami code but hasn't had a mistake yet either\n      if (keyUpCount < konamiCode.data.length - 1) {\n        //if the next keyup is the right key for konami code, continue waiting for next key\n        if (konamiCode.data[keyUpCount] === code) {\n          setKeyUpCount(keyUpCount + 1);\n        } //if the next keyup is the wrong key for konami code, start over\n        else {\n          setKeyUpCount(0);\n        } //if the current code is equal to the konami code\n      } else {\n        setKeyUpCount(0);\n        incrementTotalLives();\n      }\n    }\n  };\n\n  const refreshCards = async (size) => {\n    let tempCards = [];\n    for (let i = 0; i <= size; i++) {\n      try {\n        let response = await fetch(\"https://picsum.photos/100/\");\n        let name = await response.url;\n        tempCards.push({\n          picture: name,\n          name: i + \"\",\n          hasBeenSelected: false,\n        });\n      } catch (e) {\n        console.error(e.message);\n      }\n    }\n    setCurrentCards(tempCards);\n  };\n\n  useEffect(() => {\n    refreshCards(1);\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener(\"keyup\", upUpDownDown);\n\n    return () => {\n      window.removeEventListener(\"keyup\", upUpDownDown);\n    };\n  });\n\n  return (\n    <div>\n      <Header\n        currentScore={currentScore}\n        currentLevel={currentLevel}\n        bestScore={bestScore}\n        codeIsActivated={codeIsActivated}\n        totalLives={totalLives}\n      />\n      <Body\n        currentCards={currentCards}\n        setCurrentCards={setCurrentCards}\n        incrementCurrentScore={incrementCurrentScore}\n        incrementLevel={incrementLevel}\n        madeAMistake={madeAMistake}\n      />\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}