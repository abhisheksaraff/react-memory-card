{"ast":null,"code":"var _jsxFileName = \"/Users/coder/Documents/The Odin Project/repos/memory-card/react-memory-card/src/components/Body.js\";\nimport CardGroup from \"react-bootstrap/CardGroup\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Cards from \"./Cards\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Body = _ref => {\n  let {\n    currentCards,\n    setCurrentCards,\n    incrementCurrentScore,\n    incrementLevel,\n    madeAMistake,\n    showAlert,\n    setShowAlert,\n    codeIsActivated\n  } = _ref;\n  const shuffle = cards => {\n    //shuffle currentCards\n    let newOrder = [],\n      shuffledCards = []; //contains the order in which currentCards will be shuffled\n\n    //this will run until newOrder has a position for each element of currentCards that will later be stored in currentCards\n    while (newOrder.length !== cards.length) {\n      let tempPosition = Math.floor(Math.random() * cards.length); //Generate a temp number between 0 and length of cards - 1\n\n      if (!newOrder.includes(tempPosition)) newOrder.push(tempPosition);\n    }\n\n    //arrange shuffledCards according to newOrder\n    for (let i = 0; i < cards.length; i++) {\n      shuffledCards.push(cards[newOrder[i]]);\n    }\n    return shuffledCards;\n  };\n  const updateHasBeenClicked = cardId => {\n    let tempCurrentCards = [];\n    let hasMadeAMistake = false;\n    currentCards.forEach(card => {\n      if (card.name === cardId) {\n        if (card.hasBeenSelected === false) {\n          //cards hasn't been clicked before\n          incrementCurrentScore();\n          tempCurrentCards.push({\n            picture: card.picture,\n            name: card.name,\n            hasBeenSelected: true\n          });\n        } else {\n          //cards has been clicked before\n          hasMadeAMistake = true;\n          tempCurrentCards.push(card);\n        }\n      } else tempCurrentCards.push(card); //untouched card\n    });\n\n    if (!hasMadeAMistake) {\n      let selectedCardsCount = 0;\n      tempCurrentCards.forEach(card => {\n        if (card.hasBeenSelected) selectedCardsCount++;\n      });\n      if (selectedCardsCount === currentCards.length) {\n        //every cards has been selected\n        incrementLevel();\n      } else {\n        //not all cards have been selected\n        setCurrentCards(shuffle(tempCurrentCards));\n      }\n    } else {\n      setCurrentCards(shuffle(tempCurrentCards));\n      madeAMistake();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body\",\n    children: [showAlert && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"danger\",\n      onClose: () => setShowAlert(false),\n      dismissible: true,\n      children: [/*#__PURE__*/_jsxDEV(Alert.Heading, {\n        children: \"Oh snap... You lost!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Try again.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), currentCards.size === 0 && /*#__PURE__*/_jsxDEV(CardGroup, {\n      children: currentCards.map(card => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Cards, {\n            picture: card.picture,\n            name: card.name,\n            hasBeenSelected: card.hasBeenSelected,\n            updateHasBeenClicked: updateHasBeenClicked,\n            codeIsActivated: codeIsActivated\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 17\n          }, this)\n        }, card.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_c = Body;\nexport default Body;\nvar _c;\n$RefreshReg$(_c, \"Body\");","map":{"version":3,"names":["CardGroup","Alert","Cards","jsxDEV","_jsxDEV","Body","_ref","currentCards","setCurrentCards","incrementCurrentScore","incrementLevel","madeAMistake","showAlert","setShowAlert","codeIsActivated","shuffle","cards","newOrder","shuffledCards","length","tempPosition","Math","floor","random","includes","push","i","updateHasBeenClicked","cardId","tempCurrentCards","hasMadeAMistake","forEach","card","name","hasBeenSelected","picture","selectedCardsCount","className","children","variant","onClose","dismissible","Heading","fileName","_jsxFileName","lineNumber","columnNumber","size","map","_c","$RefreshReg$"],"sources":["/Users/coder/Documents/The Odin Project/repos/memory-card/react-memory-card/src/components/Body.js"],"sourcesContent":["import CardGroup from \"react-bootstrap/CardGroup\";\nimport Alert from \"react-bootstrap/Alert\";\n\nimport Cards from \"./Cards\";\n\nconst Body = ({\n  currentCards,\n  setCurrentCards,\n  incrementCurrentScore,\n  incrementLevel,\n  madeAMistake,\n  showAlert,\n  setShowAlert,\n  codeIsActivated,\n}) => {\n  const shuffle = (cards) => {\n    //shuffle currentCards\n    let newOrder = [],\n      shuffledCards = []; //contains the order in which currentCards will be shuffled\n\n    //this will run until newOrder has a position for each element of currentCards that will later be stored in currentCards\n    while (newOrder.length !== cards.length) {\n      let tempPosition = Math.floor(Math.random() * cards.length); //Generate a temp number between 0 and length of cards - 1\n\n      if (!newOrder.includes(tempPosition)) newOrder.push(tempPosition);\n    }\n\n    //arrange shuffledCards according to newOrder\n    for (let i = 0; i < cards.length; i++) {\n      shuffledCards.push(cards[newOrder[i]]);\n    }\n\n    return shuffledCards;\n  };\n\n  const updateHasBeenClicked = (cardId) => {\n    let tempCurrentCards = [];\n    let hasMadeAMistake = false;\n\n    currentCards.forEach((card) => {\n      if (card.name === cardId) {\n        if (card.hasBeenSelected === false) {\n          //cards hasn't been clicked before\n          incrementCurrentScore();\n          tempCurrentCards.push({\n            picture: card.picture,\n            name: card.name,\n            hasBeenSelected: true,\n          });\n        } else {\n          //cards has been clicked before\n          hasMadeAMistake = true;\n          tempCurrentCards.push(card);\n        }\n      } else tempCurrentCards.push(card); //untouched card\n    });\n\n    if (!hasMadeAMistake) {\n      let selectedCardsCount = 0;\n      tempCurrentCards.forEach((card) => {\n        if (card.hasBeenSelected) selectedCardsCount++;\n      });\n\n      if (selectedCardsCount === currentCards.length) {\n        //every cards has been selected\n        incrementLevel();\n      } else {\n        //not all cards have been selected\n        setCurrentCards(shuffle(tempCurrentCards));\n      }\n    } else {\n      setCurrentCards(shuffle(tempCurrentCards));\n      madeAMistake();\n    }\n  };\n\n  return (\n    <div className=\"body\">\n      {showAlert && (\n        <Alert variant=\"danger\" onClose={() => setShowAlert(false)} dismissible>\n          <Alert.Heading>Oh snap... You lost!</Alert.Heading>\n          <p>Try again.</p>\n        </Alert>\n      )}\n      {currentCards.size === 0 && (\n        <CardGroup>\n          {currentCards.map((card) => {\n            return (\n              <div key={card.name}>\n                <Cards\n                  picture={card.picture}\n                  name={card.name}\n                  hasBeenSelected={card.hasBeenSelected}\n                  updateHasBeenClicked={updateHasBeenClicked}\n                  codeIsActivated={codeIsActivated}\n                />\n              </div>\n            );\n          })}\n        </CardGroup>\n      )}\n    </div>\n  );\n};\n\nexport default Body;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}