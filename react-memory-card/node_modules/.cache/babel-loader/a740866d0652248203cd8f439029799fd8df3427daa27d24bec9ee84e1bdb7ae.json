{"ast":null,"code":"var _jsxFileName = \"/Users/coder/Documents/The Odin Project/repos/memory-card/react-memory-card/src/components/Body.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Card from \"./Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Body = _ref => {\n  _s();\n  let {\n    currentCards,\n    incrementCurrentScore,\n    incrementLevel,\n    madeAMistake\n  } = _ref;\n  const [cardsDisplay, setCardsDisplay] = useState(currentCards);\n  const [hasMadeAMistake, setHasMadeAMistake] = useState(false);\n  const shuffle = () => {\n    //shuffle currentCards\n    let newOrder = [],\n      shuffledCards = []; //contains the order in which currentCards will be shuffled\n\n    //this will run until newOrder has a position for each element of currentCards that will later be stored in cardsDisplay\n    while (newOrder.length !== currentCards.length) {\n      let tempPosition = Math.floor(Math.random() * cardsDisplay.length); //Generate a temp number between 0 and length of cards - 1\n\n      if (!newOrder.includes(tempPosition)) newOrder.push(tempPosition);\n    }\n\n    //arrange shuffledCards according to newOrder\n    for (let i = 0; i < currentCards.length; i++) {\n      shuffledCards.push(currentCards[newOrder[i]]);\n    }\n    setCardsDisplay(shuffledCards);\n  };\n  const updateHasBeenClicked = cardId => {\n    let tempCardsDisplay = [];\n    cardsDisplay.forEach(card => {\n      if (card.name === cardId) {\n        if (card.hasBeenSelected === false) {\n          //cards hasn't been clicked before\n          incrementCurrentScore();\n          tempCardsDisplay.push({\n            picture: card.picture,\n            name: card.name,\n            hasBeenSelected: true\n          });\n        } else {\n          //cards has been clicked before\n          setHasMadeAMistake(true);\n          madeAMistake();\n        }\n      } else tempCardsDisplay.push(card); //untouched card\n    });\n\n    if (!hasMadeAMistake) setCardsDisplay(tempCardsDisplay);\n    console.log(hasMadeAMistake);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: incrementCurrentScore,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: madeAMistake,\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: cardsDisplay.map(card => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            picture: card.picture,\n            name: card.name,\n            hasBeenSelected: card.hasBeenSelected,\n            updateHasBeenClicked: updateHasBeenClicked\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this)\n        }, card.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Body, \"hQCfMf0UajKu2tsa4peg1DMnX/E=\");\n_c = Body;\nexport default Body;\nvar _c;\n$RefreshReg$(_c, \"Body\");","map":{"version":3,"names":["React","useState","Card","jsxDEV","_jsxDEV","Fragment","_Fragment","Body","_ref","_s","currentCards","incrementCurrentScore","incrementLevel","madeAMistake","cardsDisplay","setCardsDisplay","hasMadeAMistake","setHasMadeAMistake","shuffle","newOrder","shuffledCards","length","tempPosition","Math","floor","random","includes","push","i","updateHasBeenClicked","cardId","tempCardsDisplay","forEach","card","name","hasBeenSelected","picture","console","log","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","_c","$RefreshReg$"],"sources":["/Users/coder/Documents/The Odin Project/repos/memory-card/react-memory-card/src/components/Body.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport Card from \"./Card\";\n\nconst Body = ({\n  currentCards,\n  incrementCurrentScore,\n  incrementLevel,\n  madeAMistake,\n}) => {\n  const [cardsDisplay, setCardsDisplay] = useState(currentCards);\n  const [hasMadeAMistake, setHasMadeAMistake] = useState(false);\n\n  const shuffle = () => {\n    //shuffle currentCards\n    let newOrder = [],\n      shuffledCards = []; //contains the order in which currentCards will be shuffled\n\n    //this will run until newOrder has a position for each element of currentCards that will later be stored in cardsDisplay\n    while (newOrder.length !== currentCards.length) {\n      let tempPosition = Math.floor(Math.random() * cardsDisplay.length); //Generate a temp number between 0 and length of cards - 1\n\n      if (!newOrder.includes(tempPosition)) newOrder.push(tempPosition);\n    }\n\n    //arrange shuffledCards according to newOrder\n    for (let i = 0; i < currentCards.length; i++) {\n      shuffledCards.push(currentCards[newOrder[i]]);\n    }\n\n    setCardsDisplay(shuffledCards);\n  };\n\n  const updateHasBeenClicked = (cardId) => {\n    let tempCardsDisplay = [];\n\n    cardsDisplay.forEach((card) => {\n      if (card.name === cardId) {\n        if (card.hasBeenSelected === false) {\n          //cards hasn't been clicked before\n          incrementCurrentScore();\n          tempCardsDisplay.push({\n            picture: card.picture,\n            name: card.name,\n            hasBeenSelected: true,\n          });\n        } else {\n          //cards has been clicked before\n          setHasMadeAMistake(true);\n          madeAMistake();\n        }\n      } else tempCardsDisplay.push(card); //untouched card\n    });\n\n    if (!hasMadeAMistake) setCardsDisplay(tempCardsDisplay);\n    console.log(hasMadeAMistake)\n  };\n\n  return (\n    <>\n      <button onClick={incrementCurrentScore}>+</button>\n      <button onClick={madeAMistake}>-</button>\n      <ul>\n        {cardsDisplay.map((card) => {\n          return (\n            <li key={card.name}>\n              <Card\n                picture={card.picture}\n                name={card.name}\n                hasBeenSelected={card.hasBeenSelected}\n                updateHasBeenClicked={updateHasBeenClicked}\n              />\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default Body;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}